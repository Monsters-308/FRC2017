package org.usfirst.frc308.FRC2017.subsystems;


import org.usfirst.frc308.FRC2017.RobotMap;
import org.usfirst.frc308.FRC2017.commands.*;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import de.codeteddy.robotics.first.*;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc308.FRC2017.Robot;
import org.usfirst.frc308.FRC2017.RobotConstants;

/**
 * 
 * @author Matteo
 * @author Autogenerated
 *
 */

public class Chassis extends PIDSubsystem {
	
	

	private final CANTalon left1 = RobotMap.chassisCANTalon_1;
	private final CANTalon left2 = RobotMap.chassisCANTalon_2;
	private final CANTalon left3 = RobotMap.chassisCANTalon_3;
	private final CANTalon right1 = RobotMap.chassisCANTalon_4;
	private final CANTalon right2 = RobotMap.chassisCANTalon_5;
	private final CANTalon right3 = RobotMap.chassisCANTalon_6;
	private final RobotDrive robotDrive6 = RobotMap.chassisRobotDrive6;
 	//private final AnalogGyro analogGyro1 = RobotMap.chassisAnalogGyro1;
    private final ADXRS450_Gyro gyro = RobotMap.spiGyro_1;
    private final Solenoid claw1 = RobotMap.gearDeliverySolenoid_1;
    private final Solenoid claw2 = RobotMap.gearDeliverySolenoid_2;
    private final Solenoid claw3 = RobotMap.gearDeliverySolenoid_3;
 	//public RobotDrive _drive = new RobotDrive(left1, left2, right1, right2);
	//public RobotDrive _drive2  = new RobotDrive(left3, right3); 
 	
 	//BuiltInAccelerometer accel;


 	// Initialize your subsystem here
 	public Chassis(){
 		super("Chassis", 1.0, 0.0, 0.0);
 		setAbsoluteTolerance(0.2);
 		getPIDController().setContinuous(false);
 		//LiveWindow.addActuator("Chassis", "PIDSubsystem Controller", getPIDController());


 		// Use these to get going:
 		// setSetpoint() -  Sets where the PID controller should move the system
 		//                  to
 		// enable() - Enables the PID controller.
 		//super("Drivetrain", RobotConstants.Kp, 0, RobotConstants.Kd);
		setAbsoluteTolerance(RobotConstants.gyroPIDErrorTolerance);
		getPIDController().setContinuous(true);
		getPIDController().setInputRange(-180, 180);
		//LiveWindow.addActuator("Drivetrain", "PIDSubsystem Controller", getPIDController());
		getPIDController().setOutputRange(-1.0, 1.0);
		//accel = new BuiltInAccelerometer();
		gyro.calibrate();
 		
 		
 	}
 


 	public void initDefaultCommand() {
	
 		setDefaultCommand(new TeleopDrive());

 		// Set the default command for a subsystem here.
 		//setDefaultCommand(new MySpecialCommand());
 	}
 
 
 	//Chassis setup
 	public void setupDrive() {
 		/**
 		left1.changeControlMode(TalonControlMode.PercentVbus);
 		left2.changeControlMode(TalonControlMode.Follower);
 		left2.set(1);
 		left3.changeControlMode(TalonControlMode.Follower);
 		left3.set(1);
 		right1.changeControlMode(TalonControlMode.PercentVbus);
 		right2.changeControlMode(TalonControlMode.Follower);
 		right2.set(4);
 		right3.changeControlMode(TalonControlMode.Follower);
 		right3.set(4);
 		**/
 	}
 	

 	public void arcadeDrive(double forward, double turn) {
// 		robotDrive6.setSafetyEnabled(RobotConstants.safetyEnabled);
// 		robotDrive6.setExpiration(RobotConstants.arcadeExpiration);
// 		robotDrive6.setSensitivity(RobotConstants.arcadeSensitivity);
// 		robotDrive6.setMaxOutput(RobotConstants.arcadeMaxOutput);
 	}
 
 
 protected double returnPIDInput() {
     // Return your input value for the PID loop
     // e.g. a sensor, like a potentiometer:
     // yourPot.getAverageVoltage() / kYourMaxVoltage;

     return gyro.getAngle();
 }

 protected void usePIDOutput(double output) {
     // Use output to drive your system, like a motor
     // e.g. yourMotor.set(output);
	 //     left1.pidWrite(output);
 }
 public void claw1_Open() {
		// 
		// open claw 1
		Robot.chassis.claw1.set(true);
	}
 public void claw1_Close() {
		// 
		// close claw 1
		Robot.chassis.claw1.set(false);
	}
 public void claw2_Open() {
		// 
		// open claw 2
		Robot.chassis.claw2.set(true);
	}
 public void claw2_Close() {
		// 
		// close claw 2
		Robot.chassis.claw2.set(false);
	}
 public void claw3_Open() {
		// 
		// open claw 3
		Robot.chassis.claw3.set(true);
	}
public void claw3_Close() {
		// 
		// close claw 3
		Robot.chassis.claw3.set(false);
	}
 
}
