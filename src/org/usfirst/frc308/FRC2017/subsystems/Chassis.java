// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc308.FRC2017.subsystems;


import org.usfirst.frc308.FRC2017.RobotMap;
import org.usfirst.frc308.FRC2017.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc308.FRC2017.Robot;
import org.usfirst.frc308.FRC2017.RobotConstants;

/**
 * 
 * @author Matteo
 * @author Autogenerated
 *
 */
//git hub test

public class Chassis extends PIDSubsystem {
	
	

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final CANTalon left1 = RobotMap.chassisCANTalon_1;
	private final CANTalon left2 = RobotMap.chassisCANTalon_2;
	private final CANTalon left3 = RobotMap.chassisCANTalon_3;
	private final CANTalon right1 = RobotMap.chassisCANTalon_4;
	private final CANTalon right2 = RobotMap.chassisCANTalon_5;
	private final CANTalon right3 = RobotMap.chassisCANTalon_6;
//	private final RobotDrive robotDrive6 = RobotMap.chassisRobotDrive6;
 	private final AnalogGyro analogGyro1 = RobotMap.chassisAnalogGyro1;

 	public RobotDrive _drive = new RobotDrive(left1, left2, right1, right2);
	public RobotDrive _drive2  = new RobotDrive(left3, right3); 
 	
 	//BuiltInAccelerometer accel;
 	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

 	// Initialize your subsystem here
 	public Chassis()
 	{
 		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
 //		super("Chassis", 1.0, 0.0, 0.0);
// 	setAbsoluteTolerance(0.2);
 //	getPIDController().setContinuous(false);
//	LiveWindow.addActuator("Chassis", "PIDSubsystem Controller", getPIDController());

 		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

 		// Use these to get going:
 		// setSetpoint() -  Sets where the PID controller should move the system
 		//                  to
 		// enable() - Enables the PID controller.
 		super("Drivetrain", RobotConstants.Kp, 0, RobotConstants.Kd);
		setAbsoluteTolerance(RobotConstants.gyroPIDErrorTolerance);
		getPIDController().setContinuous(true);
		getPIDController().setInputRange(-180, 180);
		LiveWindow.addActuator("Drivetrain", "PIDSubsystem Controller", getPIDController());
		getPIDController().setOutputRange(-1.0, 1.0);
		//accel = new BuiltInAccelerometer();
		
 		
 		
 	}
 


 	public void initDefaultCommand() {
 		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
 		
 		setDefaultCommand(new TeleopDrive());

 		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

 		// Set the default command for a subsystem here.
 		//setDefaultCommand(new MySpecialCommand());
 	}
 
 
 	//Chassis setup
 	public void setupDrive() {
 		left1.changeControlMode(TalonControlMode.PercentVbus);
 		left2.changeControlMode(TalonControlMode.Follower);
 		left2.set(1);
 		left3.changeControlMode(TalonControlMode.Follower);
 		left3.set(1);
 		right1.changeControlMode(TalonControlMode.PercentVbus);
 		right2.changeControlMode(TalonControlMode.Follower);
 		right2.set(4);
 		right3.changeControlMode(TalonControlMode.Follower);
 		right3.set(4);
 	}
 	//jjshfkjhs,j

 	public void arcadeDrive(double forward, double turn) {
// 		robotDrive6.setSafetyEnabled(RobotConstants.safetyEnabled);
// 		robotDrive6.setExpiration(RobotConstants.arcadeExpiration);
// 		robotDrive6.setSensitivity(RobotConstants.arcadeSensitivity);
// 		robotDrive6.setMaxOutput(RobotConstants.arcadeMaxOutput);
 	}
 
 
 protected double returnPIDInput() {
     // Return your input value for the PID loop
     // e.g. a sensor, like a potentiometer:
     // yourPot.getAverageVoltage() / kYourMaxVoltage;

     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
     return analogGyro1.pidGet();

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
 }

 protected void usePIDOutput(double output) {
     // Use output to drive your system, like a motor
     // e.g. yourMotor.set(output);

     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
     left1.pidWrite(output);

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
 }
}
